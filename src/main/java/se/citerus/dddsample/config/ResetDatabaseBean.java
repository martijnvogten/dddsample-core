package se.citerus.dddsample.config;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import org.hibernate.Session;
import org.springframework.beans.factory.annotation.Autowired;

import jakarta.annotation.PostConstruct;
import jakarta.persistence.EntityManager;
import nl.pojoquery.DB;
import nl.pojoquery.SqlExpression;

public class ResetDatabaseBean {
  
  @Autowired
  EntityManager entityManager;

  @PostConstruct
  public void clearDatabase() {
    entityManager.unwrap(Session.class).doWork((conn) -> {
      String url = conn.getMetaData().getURL();
      if (url.startsWith("jdbc:mysql:")) { // MySQL
        truncateMySQLDatabase(conn);
      } else if (url.startsWith("jdbc:hsqldb:")) { // HSQLDB
        try {
          restoreHSQLDatabaseFromDumpfile(conn, Paths.get(".", "hsqldump.sql"));
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
      } else {
        throw new RuntimeException("Unsupported database engine: " + conn.getMetaData().getDatabaseProductName());
      }
    });
  }

  private void truncateMySQLDatabase(Connection conn) {
    List<String> tableNames = DB.queryColumns(conn, "SHOW TABLES").get(0);
    DB.update(conn, SqlExpression.sql("SET foreign_key_checks = 0"));
    try {
      for (String table : tableNames) {
        DB.update(conn, SqlExpression.sql("TRUNCATE TABLE " + table));
        List<String> fieldNames = DB.queryColumns(conn, "DESCRIBE " + table).get(0);
        if (fieldNames.contains("id")) {
          DB.update(conn, SqlExpression.sql("ALTER TABLE " + table + " MODIFY COLUMN id BIGINT auto_increment NOT NULL"));
        }
      }
    } finally {
      DB.update(conn, SqlExpression.sql("SET foreign_key_checks = 1"));
    }
  }

  private void restoreHSQLDatabaseFromDumpfile(Connection conn, Path file) throws IOException, SQLException {
    for (String command : Files.readAllLines(file)) {
      command = command.replace("ID BIGINT NOT NULL PRIMARY KEY", "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY"); 
      try {
        try (PreparedStatement pstmt = conn.prepareStatement(command)) {
          pstmt.executeUpdate(); // execute update statement
        }
      } catch (Exception e) {
        System.out.println("ERROR: " + e.getMessage());
      }
    }
    conn.commit();
  }
}
